const { JSDOM } = require('jsdom')
const dom = new JSDOM('<!DOCTYPE html></html>', { url: 'http://localhost:8080' })
global.window = dom.window
global.document = window.document
global.navigator = window.navigator

const cookieParser = require('cookie-parser')
const router = require('./server/router.js')
const cors = require('cors')
const hasToken = require('./server/has-token.js')

const fs = require('fs')
const path = require('path')
const LRU = require('lru-cache')
const express = require('express')
const favicon = require('serve-favicon')
const compression = require('compression')
const resolve = file => path.resolve(__dirname, file)
const { createBundleRenderer } = require('vue-server-renderer')

const isProd = process.env.NODE_ENV === 'production'
const useMicroCache = process.env.MICRO_CACHE !== 'false'
const serverInfo =
  `express/${require('express/package.json').version} ` +
  `vue-server-renderer/${require('vue-server-renderer/package.json').version}`

const app = express()
app.use(cookieParser())

const template = fs.readFileSync(resolve('./src/index.template.html'), 'utf-8')

function createRenderer (bundle, options) {
  // https://github.com/vuejs/vue/blob/dev/packages/vue-server-renderer/README.md#why-use-bundlerenderer
  return createBundleRenderer(bundle, Object.assign(options, {
    template,
    // for component caching
    cache: LRU({
      max: 1000,
      maxAge: 1000 * 60 * 15
    }),
    // this is only needed when vue-server-renderer is npm-linked
    basedir: resolve('./dist'),
    // recommended for performance
    runInNewContext: true
  }))
}

let renderer
let readyPromise
if (isProd) {
  // In production: create server renderer using built server bundle.
  // The server bundle is generated by vue-ssr-webpack-plugin.
  const bundle = require('./dist/vue-ssr-server-bundle.json')
  // The client manifests are optional, but it allows the renderer
  // to automatically infer preload/prefetch links and directly add <script>
  // tags for any async chunks used during render, avoiding waterfall requests.
  const clientManifest = require('./dist/vue-ssr-client-manifest.json')
  renderer = createRenderer(bundle, {
    clientManifest
  })
} else {
  // In development: setup the dev server with watch and hot-reload,
  // and create a new renderer on bundle / index template update.
  readyPromise = require('./build/setup-dev-server')(app, (bundle, options) => {
    renderer = createRenderer(bundle, options)
  })
}

const serve = (path, cache) => express.static(resolve(path), {
  maxAge: cache && isProd ? 1000 * 60 * 60 * 24 * 30 : 0
})

app.use(cors())
app.use(compression({ threshold: 0 }))
app.use(favicon('./public/logo-48.png'))
app.use('/dist', serve('./dist', true))
app.use('/public', serve('./public', true))
app.use('/manifest.json', serve('./manifest.json', true))
app.use('/service-worker.js', serve('./dist/service-worker.js'))

// 1-second microcache.
// https://www.nginx.com/blog/benefits-of-microcaching-nginx/
const microCache = LRU({
  max: 100,
  maxAge: 1000
})

// since this app has no user-specific content, every page is micro-cacheable.
// if your app involves user-specific content, you need to implement custom
// logic to determine whether a request is cacheable based on its url and
// headers.
const isCacheable = req => useMicroCache

function render (req, res) {
  const s = Date.now()

  res.setHeader("Content-Type", "text/html")
  res.setHeader("Server", serverInfo)

  const handleError = err => {
    if (err.url) {
      res.redirect(err.url)
    } else if(err.code === 404) {
      res.status(404).end('404 | Page Not Found')
    } else {
      // Render Error Page or Redirect
      res.status(500).end('500 | Internal Server Error')
      console.error(`error during render : ${req.url}`)
      console.error(err.stack)
    }
  }

  const cacheable = isCacheable(req)
  if (cacheable) {
    const hit = microCache.get(req.url)
    if (hit) {
      if (!isProd) {
        console.log(`cache hit!`)
      }
      return res.end(hit)
    }
  }

  const context = {
    title: 'vueblog',
    url: req.url,
    cookies: req.cookies
  }
  renderer.renderToString(context, (err, html) => {
    if (err) {
      return handleError(err)
    }
    res.end(html)
    if (cacheable) {
      microCache.set(req.url, html)
    }
    if (!isProd) {
      console.log(`whole request: ${Date.now() - s}ms`)
    }
  })
}

// client http intercept
app.get('/login', function(req, res, next) {
  if (req.cookies.token) {
    res.redirect('/')
  } else {
    next()
  }
})

// server http intercept
app.get(['/admin', '/admin/*', '/publish', '/publish/*', '/updateAdminPassword', '/updateAdminInfo'], function(req, res, next) {
  if (req.cookies.token) {
    next()
  } else {
    res.redirect('/login')
  }
})

// published articles
app.get('/api/posts', router.posts)

// 获取新闻列表
app.get('/api/getnewslist', router.getnewslist)

// administrator infomation
app.get('/api/administrator', router.admin)

// article detail content http://localhost:8080/api/article?id=1496841740682
app.get('/api/article', router.getArticle)

app.get('/api/getNewsDetail', router.getNewsDetail)

app.get('/api/uploadimagedesc', router.getUploadimagedesc)

app.get('/api/uploadimagedesc2', router.getUploadimagedesc2)

// tags infomation
app.get('/api/tags', router.tags)

// 查询所有的标签名称
app.get('/api/tagnames', router.tagnames)

// get articles by tag http://localhost:8080/api/tag?tag=javascript
app.get('/api/tag', router.tag)

app.get('/api/getnewsbytag', router.getnewsbytag)

app.get('/api/getnewsbytime', router.getnewsbytime)

app.post('/api/getPoloItemsByPost', router.getPoloItemsByPost)

// search articles http://localhost:8080/api/search?q=js
app.get('/api/search', router.search)

// archives infomation
app.get('/api/archives', router.archives)

// 查询所有文章的发表时间 汇总
app.get('/api/publishdates', router.publishdates)

// get articles by archive http://localhost:8080/api/archive?date=201706
app.get('/api/archive', router.archive)

// all articles
app.get('/api/articles', router.articles)

// publish or edit article
app.post('/api/article', hasToken, router.article)

// 发布一条新闻
app.post('/api/news', hasToken, router.news)

// administrator login
app.post('/api/login',router.login)

// administrator logout
app.post('/api/logout', router.logout)

// update administrator infomation
app.put('/api/administrator', hasToken, router.updateAdminInfo)

// update administrator avatar
app.post('/api/avatar', hasToken, router.avatar)

app.post('/api/upload', hasToken, router.uploadnewspic)

app.post('/api/uploadnewspic', hasToken, router.uploadnewspic)

app.post('/api/uploadimage', hasToken, router.uploadimage)

// 上传首页轮播图
app.post('/api/upindexpic', hasToken, router.upindexpic)

app.post('/api/upcomintrucpic', hasToken, router.upcomintrucpic)

app.post('/api/uploaditemimage', hasToken, router.uploaditemimage)

app.post('/api/uploadimagedesc', hasToken, router.uploadimagedesc)

app.post('/api/uploadimagedesc2', hasToken, router.uploadimagedesc2)

app.post('/api/upPoloItem', hasToken, router.upPoloItem)

app.post('/api/upMendian', hasToken, router.upMendian)

app.post('/api/upJoinus',  router.upJoinus)

app.post('/api/deleteMendian', hasToken, router.deleteMendian)

app.post('/api/deleteNews', hasToken, router.deleteNews)

app.post('/api/deleteItem', hasToken, router.deleteItem)

app.get('/api/getMendians', router.getMendians)

app.get('/api/getJoinus', router.getJoinus)

app.post('/api/getMendianByPost', router.getMendianByPost)

app.get('/api/getPoloItem', router.getPoloItem)  // todo 这个hastoken 怎么玩

app.get('/api/getAllStates', router.getAllStates)

// update administrator password
app.put('/api/password', hasToken, router.updateAdminPassword)

// delete article  http://localhost:8080/api/article?id=1496841740682
app.delete('/api/article', hasToken, router.deleteArticle)

app.get('*', isProd ? render : (req, res) => {
  readyPromise.then(() => render(req, res))
})

const port = process.env.PORT || 8080
app.listen(port, () => {
  console.log(`server started at localhost:${port}`)
})